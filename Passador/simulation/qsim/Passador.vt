// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "12/03/2018 03:10:32"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    Passador
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module Passador_vlg_sample_tst(
	clock,
	entrada,
	sampler_tx
);
input  clock;
input [7:0] entrada;
output sampler_tx;

reg sample;
time current_time;
always @(clock or entrada)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module Passador_vlg_check_tst (
	saida0,
	saida1,
	saida2,
	saida3,
	saida4,
	saida5,
	sampler_rx
);
input [7:0] saida0;
input [7:0] saida1;
input [7:0] saida2;
input [7:0] saida3;
input [7:0] saida4;
input [7:0] saida5;
input sampler_rx;

reg [7:0] saida0_expected;
reg [7:0] saida1_expected;
reg [7:0] saida2_expected;
reg [7:0] saida3_expected;
reg [7:0] saida4_expected;
reg [7:0] saida5_expected;

reg [7:0] saida0_prev;
reg [7:0] saida1_prev;
reg [7:0] saida2_prev;
reg [7:0] saida3_prev;
reg [7:0] saida4_prev;
reg [7:0] saida5_prev;

reg [7:0] saida0_expected_prev;
reg [7:0] saida1_expected_prev;
reg [7:0] saida2_expected_prev;
reg [7:0] saida3_expected_prev;
reg [7:0] saida4_expected_prev;
reg [7:0] saida5_expected_prev;

reg [7:0] last_saida0_exp;
reg [7:0] last_saida1_exp;
reg [7:0] last_saida2_exp;
reg [7:0] last_saida3_exp;
reg [7:0] last_saida4_exp;
reg [7:0] last_saida5_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:6] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 6'b1;
end

// update real /o prevs

always @(trigger)
begin
	saida0_prev = saida0;
	saida1_prev = saida1;
	saida2_prev = saida2;
	saida3_prev = saida3;
	saida4_prev = saida4;
	saida5_prev = saida5;
end

// update expected /o prevs

always @(trigger)
begin
	saida0_expected_prev = saida0_expected;
	saida1_expected_prev = saida1_expected;
	saida2_expected_prev = saida2_expected;
	saida3_expected_prev = saida3_expected;
	saida4_expected_prev = saida4_expected;
	saida5_expected_prev = saida5_expected;
end


// expected saida0[ 7 ]
initial
begin
	saida0_expected[7] = 1'bX;
end 
// expected saida0[ 6 ]
initial
begin
	saida0_expected[6] = 1'bX;
end 
// expected saida0[ 5 ]
initial
begin
	saida0_expected[5] = 1'bX;
end 
// expected saida0[ 4 ]
initial
begin
	saida0_expected[4] = 1'bX;
end 
// expected saida0[ 3 ]
initial
begin
	saida0_expected[3] = 1'bX;
end 
// expected saida0[ 2 ]
initial
begin
	saida0_expected[2] = 1'bX;
end 
// expected saida0[ 1 ]
initial
begin
	saida0_expected[1] = 1'bX;
end 
// expected saida0[ 0 ]
initial
begin
	saida0_expected[0] = 1'bX;
end 
// expected saida1[ 7 ]
initial
begin
	saida1_expected[7] = 1'bX;
end 
// expected saida1[ 6 ]
initial
begin
	saida1_expected[6] = 1'bX;
end 
// expected saida1[ 5 ]
initial
begin
	saida1_expected[5] = 1'bX;
end 
// expected saida1[ 4 ]
initial
begin
	saida1_expected[4] = 1'bX;
end 
// expected saida1[ 3 ]
initial
begin
	saida1_expected[3] = 1'bX;
end 
// expected saida1[ 2 ]
initial
begin
	saida1_expected[2] = 1'bX;
end 
// expected saida1[ 1 ]
initial
begin
	saida1_expected[1] = 1'bX;
end 
// expected saida1[ 0 ]
initial
begin
	saida1_expected[0] = 1'bX;
end 
// expected saida2[ 7 ]
initial
begin
	saida2_expected[7] = 1'bX;
end 
// expected saida2[ 6 ]
initial
begin
	saida2_expected[6] = 1'bX;
end 
// expected saida2[ 5 ]
initial
begin
	saida2_expected[5] = 1'bX;
end 
// expected saida2[ 4 ]
initial
begin
	saida2_expected[4] = 1'bX;
end 
// expected saida2[ 3 ]
initial
begin
	saida2_expected[3] = 1'bX;
end 
// expected saida2[ 2 ]
initial
begin
	saida2_expected[2] = 1'bX;
end 
// expected saida2[ 1 ]
initial
begin
	saida2_expected[1] = 1'bX;
end 
// expected saida2[ 0 ]
initial
begin
	saida2_expected[0] = 1'bX;
end 
// expected saida3[ 7 ]
initial
begin
	saida3_expected[7] = 1'bX;
end 
// expected saida3[ 6 ]
initial
begin
	saida3_expected[6] = 1'bX;
end 
// expected saida3[ 5 ]
initial
begin
	saida3_expected[5] = 1'bX;
end 
// expected saida3[ 4 ]
initial
begin
	saida3_expected[4] = 1'bX;
end 
// expected saida3[ 3 ]
initial
begin
	saida3_expected[3] = 1'bX;
end 
// expected saida3[ 2 ]
initial
begin
	saida3_expected[2] = 1'bX;
end 
// expected saida3[ 1 ]
initial
begin
	saida3_expected[1] = 1'bX;
end 
// expected saida3[ 0 ]
initial
begin
	saida3_expected[0] = 1'bX;
end 
// expected saida4[ 7 ]
initial
begin
	saida4_expected[7] = 1'bX;
end 
// expected saida4[ 6 ]
initial
begin
	saida4_expected[6] = 1'bX;
end 
// expected saida4[ 5 ]
initial
begin
	saida4_expected[5] = 1'bX;
end 
// expected saida4[ 4 ]
initial
begin
	saida4_expected[4] = 1'bX;
end 
// expected saida4[ 3 ]
initial
begin
	saida4_expected[3] = 1'bX;
end 
// expected saida4[ 2 ]
initial
begin
	saida4_expected[2] = 1'bX;
end 
// expected saida4[ 1 ]
initial
begin
	saida4_expected[1] = 1'bX;
end 
// expected saida4[ 0 ]
initial
begin
	saida4_expected[0] = 1'bX;
end 
// expected saida5[ 7 ]
initial
begin
	saida5_expected[7] = 1'bX;
end 
// expected saida5[ 6 ]
initial
begin
	saida5_expected[6] = 1'bX;
end 
// expected saida5[ 5 ]
initial
begin
	saida5_expected[5] = 1'bX;
end 
// expected saida5[ 4 ]
initial
begin
	saida5_expected[4] = 1'bX;
end 
// expected saida5[ 3 ]
initial
begin
	saida5_expected[3] = 1'bX;
end 
// expected saida5[ 2 ]
initial
begin
	saida5_expected[2] = 1'bX;
end 
// expected saida5[ 1 ]
initial
begin
	saida5_expected[1] = 1'bX;
end 
// expected saida5[ 0 ]
initial
begin
	saida5_expected[0] = 1'bX;
end 
// generate trigger
always @(saida0_expected or saida0 or saida1_expected or saida1 or saida2_expected or saida2 or saida3_expected or saida3 or saida4_expected or saida4 or saida5_expected or saida5)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected saida0 = %b | expected saida1 = %b | expected saida2 = %b | expected saida3 = %b | expected saida4 = %b | expected saida5 = %b | ",saida0_expected_prev,saida1_expected_prev,saida2_expected_prev,saida3_expected_prev,saida4_expected_prev,saida5_expected_prev);
	$display("| real saida0 = %b | real saida1 = %b | real saida2 = %b | real saida3 = %b | real saida4 = %b | real saida5 = %b | ",saida0_prev,saida1_prev,saida2_prev,saida3_prev,saida4_prev,saida5_prev);
`endif
	if (
		( saida0_expected_prev[0] !== 1'bx ) && ( saida0_prev[0] !== saida0_expected_prev[0] )
		&& ((saida0_expected_prev[0] !== last_saida0_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida0[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida0_expected_prev);
		$display ("     Real value = %b", saida0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_saida0_exp[0] = saida0_expected_prev[0];
	end
	if (
		( saida0_expected_prev[1] !== 1'bx ) && ( saida0_prev[1] !== saida0_expected_prev[1] )
		&& ((saida0_expected_prev[1] !== last_saida0_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida0[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida0_expected_prev);
		$display ("     Real value = %b", saida0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_saida0_exp[1] = saida0_expected_prev[1];
	end
	if (
		( saida0_expected_prev[2] !== 1'bx ) && ( saida0_prev[2] !== saida0_expected_prev[2] )
		&& ((saida0_expected_prev[2] !== last_saida0_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida0[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida0_expected_prev);
		$display ("     Real value = %b", saida0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_saida0_exp[2] = saida0_expected_prev[2];
	end
	if (
		( saida0_expected_prev[3] !== 1'bx ) && ( saida0_prev[3] !== saida0_expected_prev[3] )
		&& ((saida0_expected_prev[3] !== last_saida0_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida0[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida0_expected_prev);
		$display ("     Real value = %b", saida0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_saida0_exp[3] = saida0_expected_prev[3];
	end
	if (
		( saida0_expected_prev[4] !== 1'bx ) && ( saida0_prev[4] !== saida0_expected_prev[4] )
		&& ((saida0_expected_prev[4] !== last_saida0_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida0[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida0_expected_prev);
		$display ("     Real value = %b", saida0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_saida0_exp[4] = saida0_expected_prev[4];
	end
	if (
		( saida0_expected_prev[5] !== 1'bx ) && ( saida0_prev[5] !== saida0_expected_prev[5] )
		&& ((saida0_expected_prev[5] !== last_saida0_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida0[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida0_expected_prev);
		$display ("     Real value = %b", saida0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_saida0_exp[5] = saida0_expected_prev[5];
	end
	if (
		( saida0_expected_prev[6] !== 1'bx ) && ( saida0_prev[6] !== saida0_expected_prev[6] )
		&& ((saida0_expected_prev[6] !== last_saida0_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida0[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida0_expected_prev);
		$display ("     Real value = %b", saida0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_saida0_exp[6] = saida0_expected_prev[6];
	end
	if (
		( saida0_expected_prev[7] !== 1'bx ) && ( saida0_prev[7] !== saida0_expected_prev[7] )
		&& ((saida0_expected_prev[7] !== last_saida0_exp[7]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida0[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida0_expected_prev);
		$display ("     Real value = %b", saida0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_saida0_exp[7] = saida0_expected_prev[7];
	end
	if (
		( saida1_expected_prev[0] !== 1'bx ) && ( saida1_prev[0] !== saida1_expected_prev[0] )
		&& ((saida1_expected_prev[0] !== last_saida1_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida1[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida1_expected_prev);
		$display ("     Real value = %b", saida1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_saida1_exp[0] = saida1_expected_prev[0];
	end
	if (
		( saida1_expected_prev[1] !== 1'bx ) && ( saida1_prev[1] !== saida1_expected_prev[1] )
		&& ((saida1_expected_prev[1] !== last_saida1_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida1[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida1_expected_prev);
		$display ("     Real value = %b", saida1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_saida1_exp[1] = saida1_expected_prev[1];
	end
	if (
		( saida1_expected_prev[2] !== 1'bx ) && ( saida1_prev[2] !== saida1_expected_prev[2] )
		&& ((saida1_expected_prev[2] !== last_saida1_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida1[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida1_expected_prev);
		$display ("     Real value = %b", saida1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_saida1_exp[2] = saida1_expected_prev[2];
	end
	if (
		( saida1_expected_prev[3] !== 1'bx ) && ( saida1_prev[3] !== saida1_expected_prev[3] )
		&& ((saida1_expected_prev[3] !== last_saida1_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida1[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida1_expected_prev);
		$display ("     Real value = %b", saida1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_saida1_exp[3] = saida1_expected_prev[3];
	end
	if (
		( saida1_expected_prev[4] !== 1'bx ) && ( saida1_prev[4] !== saida1_expected_prev[4] )
		&& ((saida1_expected_prev[4] !== last_saida1_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida1[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida1_expected_prev);
		$display ("     Real value = %b", saida1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_saida1_exp[4] = saida1_expected_prev[4];
	end
	if (
		( saida1_expected_prev[5] !== 1'bx ) && ( saida1_prev[5] !== saida1_expected_prev[5] )
		&& ((saida1_expected_prev[5] !== last_saida1_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida1[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida1_expected_prev);
		$display ("     Real value = %b", saida1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_saida1_exp[5] = saida1_expected_prev[5];
	end
	if (
		( saida1_expected_prev[6] !== 1'bx ) && ( saida1_prev[6] !== saida1_expected_prev[6] )
		&& ((saida1_expected_prev[6] !== last_saida1_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida1[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida1_expected_prev);
		$display ("     Real value = %b", saida1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_saida1_exp[6] = saida1_expected_prev[6];
	end
	if (
		( saida1_expected_prev[7] !== 1'bx ) && ( saida1_prev[7] !== saida1_expected_prev[7] )
		&& ((saida1_expected_prev[7] !== last_saida1_exp[7]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida1[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida1_expected_prev);
		$display ("     Real value = %b", saida1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_saida1_exp[7] = saida1_expected_prev[7];
	end
	if (
		( saida2_expected_prev[0] !== 1'bx ) && ( saida2_prev[0] !== saida2_expected_prev[0] )
		&& ((saida2_expected_prev[0] !== last_saida2_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida2[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida2_expected_prev);
		$display ("     Real value = %b", saida2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_saida2_exp[0] = saida2_expected_prev[0];
	end
	if (
		( saida2_expected_prev[1] !== 1'bx ) && ( saida2_prev[1] !== saida2_expected_prev[1] )
		&& ((saida2_expected_prev[1] !== last_saida2_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida2[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida2_expected_prev);
		$display ("     Real value = %b", saida2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_saida2_exp[1] = saida2_expected_prev[1];
	end
	if (
		( saida2_expected_prev[2] !== 1'bx ) && ( saida2_prev[2] !== saida2_expected_prev[2] )
		&& ((saida2_expected_prev[2] !== last_saida2_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida2[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida2_expected_prev);
		$display ("     Real value = %b", saida2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_saida2_exp[2] = saida2_expected_prev[2];
	end
	if (
		( saida2_expected_prev[3] !== 1'bx ) && ( saida2_prev[3] !== saida2_expected_prev[3] )
		&& ((saida2_expected_prev[3] !== last_saida2_exp[3]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida2[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida2_expected_prev);
		$display ("     Real value = %b", saida2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_saida2_exp[3] = saida2_expected_prev[3];
	end
	if (
		( saida2_expected_prev[4] !== 1'bx ) && ( saida2_prev[4] !== saida2_expected_prev[4] )
		&& ((saida2_expected_prev[4] !== last_saida2_exp[4]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida2[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida2_expected_prev);
		$display ("     Real value = %b", saida2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_saida2_exp[4] = saida2_expected_prev[4];
	end
	if (
		( saida2_expected_prev[5] !== 1'bx ) && ( saida2_prev[5] !== saida2_expected_prev[5] )
		&& ((saida2_expected_prev[5] !== last_saida2_exp[5]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida2[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida2_expected_prev);
		$display ("     Real value = %b", saida2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_saida2_exp[5] = saida2_expected_prev[5];
	end
	if (
		( saida2_expected_prev[6] !== 1'bx ) && ( saida2_prev[6] !== saida2_expected_prev[6] )
		&& ((saida2_expected_prev[6] !== last_saida2_exp[6]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida2[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida2_expected_prev);
		$display ("     Real value = %b", saida2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_saida2_exp[6] = saida2_expected_prev[6];
	end
	if (
		( saida2_expected_prev[7] !== 1'bx ) && ( saida2_prev[7] !== saida2_expected_prev[7] )
		&& ((saida2_expected_prev[7] !== last_saida2_exp[7]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida2[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida2_expected_prev);
		$display ("     Real value = %b", saida2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_saida2_exp[7] = saida2_expected_prev[7];
	end
	if (
		( saida3_expected_prev[0] !== 1'bx ) && ( saida3_prev[0] !== saida3_expected_prev[0] )
		&& ((saida3_expected_prev[0] !== last_saida3_exp[0]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida3[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida3_expected_prev);
		$display ("     Real value = %b", saida3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_saida3_exp[0] = saida3_expected_prev[0];
	end
	if (
		( saida3_expected_prev[1] !== 1'bx ) && ( saida3_prev[1] !== saida3_expected_prev[1] )
		&& ((saida3_expected_prev[1] !== last_saida3_exp[1]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida3[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida3_expected_prev);
		$display ("     Real value = %b", saida3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_saida3_exp[1] = saida3_expected_prev[1];
	end
	if (
		( saida3_expected_prev[2] !== 1'bx ) && ( saida3_prev[2] !== saida3_expected_prev[2] )
		&& ((saida3_expected_prev[2] !== last_saida3_exp[2]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida3[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida3_expected_prev);
		$display ("     Real value = %b", saida3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_saida3_exp[2] = saida3_expected_prev[2];
	end
	if (
		( saida3_expected_prev[3] !== 1'bx ) && ( saida3_prev[3] !== saida3_expected_prev[3] )
		&& ((saida3_expected_prev[3] !== last_saida3_exp[3]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida3[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida3_expected_prev);
		$display ("     Real value = %b", saida3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_saida3_exp[3] = saida3_expected_prev[3];
	end
	if (
		( saida3_expected_prev[4] !== 1'bx ) && ( saida3_prev[4] !== saida3_expected_prev[4] )
		&& ((saida3_expected_prev[4] !== last_saida3_exp[4]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida3[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida3_expected_prev);
		$display ("     Real value = %b", saida3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_saida3_exp[4] = saida3_expected_prev[4];
	end
	if (
		( saida3_expected_prev[5] !== 1'bx ) && ( saida3_prev[5] !== saida3_expected_prev[5] )
		&& ((saida3_expected_prev[5] !== last_saida3_exp[5]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida3[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida3_expected_prev);
		$display ("     Real value = %b", saida3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_saida3_exp[5] = saida3_expected_prev[5];
	end
	if (
		( saida3_expected_prev[6] !== 1'bx ) && ( saida3_prev[6] !== saida3_expected_prev[6] )
		&& ((saida3_expected_prev[6] !== last_saida3_exp[6]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida3[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida3_expected_prev);
		$display ("     Real value = %b", saida3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_saida3_exp[6] = saida3_expected_prev[6];
	end
	if (
		( saida3_expected_prev[7] !== 1'bx ) && ( saida3_prev[7] !== saida3_expected_prev[7] )
		&& ((saida3_expected_prev[7] !== last_saida3_exp[7]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida3[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida3_expected_prev);
		$display ("     Real value = %b", saida3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_saida3_exp[7] = saida3_expected_prev[7];
	end
	if (
		( saida4_expected_prev[0] !== 1'bx ) && ( saida4_prev[0] !== saida4_expected_prev[0] )
		&& ((saida4_expected_prev[0] !== last_saida4_exp[0]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida4[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida4_expected_prev);
		$display ("     Real value = %b", saida4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_saida4_exp[0] = saida4_expected_prev[0];
	end
	if (
		( saida4_expected_prev[1] !== 1'bx ) && ( saida4_prev[1] !== saida4_expected_prev[1] )
		&& ((saida4_expected_prev[1] !== last_saida4_exp[1]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida4[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida4_expected_prev);
		$display ("     Real value = %b", saida4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_saida4_exp[1] = saida4_expected_prev[1];
	end
	if (
		( saida4_expected_prev[2] !== 1'bx ) && ( saida4_prev[2] !== saida4_expected_prev[2] )
		&& ((saida4_expected_prev[2] !== last_saida4_exp[2]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida4[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida4_expected_prev);
		$display ("     Real value = %b", saida4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_saida4_exp[2] = saida4_expected_prev[2];
	end
	if (
		( saida4_expected_prev[3] !== 1'bx ) && ( saida4_prev[3] !== saida4_expected_prev[3] )
		&& ((saida4_expected_prev[3] !== last_saida4_exp[3]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida4[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida4_expected_prev);
		$display ("     Real value = %b", saida4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_saida4_exp[3] = saida4_expected_prev[3];
	end
	if (
		( saida4_expected_prev[4] !== 1'bx ) && ( saida4_prev[4] !== saida4_expected_prev[4] )
		&& ((saida4_expected_prev[4] !== last_saida4_exp[4]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida4[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida4_expected_prev);
		$display ("     Real value = %b", saida4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_saida4_exp[4] = saida4_expected_prev[4];
	end
	if (
		( saida4_expected_prev[5] !== 1'bx ) && ( saida4_prev[5] !== saida4_expected_prev[5] )
		&& ((saida4_expected_prev[5] !== last_saida4_exp[5]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida4[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida4_expected_prev);
		$display ("     Real value = %b", saida4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_saida4_exp[5] = saida4_expected_prev[5];
	end
	if (
		( saida4_expected_prev[6] !== 1'bx ) && ( saida4_prev[6] !== saida4_expected_prev[6] )
		&& ((saida4_expected_prev[6] !== last_saida4_exp[6]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida4[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida4_expected_prev);
		$display ("     Real value = %b", saida4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_saida4_exp[6] = saida4_expected_prev[6];
	end
	if (
		( saida4_expected_prev[7] !== 1'bx ) && ( saida4_prev[7] !== saida4_expected_prev[7] )
		&& ((saida4_expected_prev[7] !== last_saida4_exp[7]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida4[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida4_expected_prev);
		$display ("     Real value = %b", saida4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_saida4_exp[7] = saida4_expected_prev[7];
	end
	if (
		( saida5_expected_prev[0] !== 1'bx ) && ( saida5_prev[0] !== saida5_expected_prev[0] )
		&& ((saida5_expected_prev[0] !== last_saida5_exp[0]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida5[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida5_expected_prev);
		$display ("     Real value = %b", saida5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_saida5_exp[0] = saida5_expected_prev[0];
	end
	if (
		( saida5_expected_prev[1] !== 1'bx ) && ( saida5_prev[1] !== saida5_expected_prev[1] )
		&& ((saida5_expected_prev[1] !== last_saida5_exp[1]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida5[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida5_expected_prev);
		$display ("     Real value = %b", saida5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_saida5_exp[1] = saida5_expected_prev[1];
	end
	if (
		( saida5_expected_prev[2] !== 1'bx ) && ( saida5_prev[2] !== saida5_expected_prev[2] )
		&& ((saida5_expected_prev[2] !== last_saida5_exp[2]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida5[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida5_expected_prev);
		$display ("     Real value = %b", saida5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_saida5_exp[2] = saida5_expected_prev[2];
	end
	if (
		( saida5_expected_prev[3] !== 1'bx ) && ( saida5_prev[3] !== saida5_expected_prev[3] )
		&& ((saida5_expected_prev[3] !== last_saida5_exp[3]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida5[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida5_expected_prev);
		$display ("     Real value = %b", saida5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_saida5_exp[3] = saida5_expected_prev[3];
	end
	if (
		( saida5_expected_prev[4] !== 1'bx ) && ( saida5_prev[4] !== saida5_expected_prev[4] )
		&& ((saida5_expected_prev[4] !== last_saida5_exp[4]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida5[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida5_expected_prev);
		$display ("     Real value = %b", saida5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_saida5_exp[4] = saida5_expected_prev[4];
	end
	if (
		( saida5_expected_prev[5] !== 1'bx ) && ( saida5_prev[5] !== saida5_expected_prev[5] )
		&& ((saida5_expected_prev[5] !== last_saida5_exp[5]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida5[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida5_expected_prev);
		$display ("     Real value = %b", saida5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_saida5_exp[5] = saida5_expected_prev[5];
	end
	if (
		( saida5_expected_prev[6] !== 1'bx ) && ( saida5_prev[6] !== saida5_expected_prev[6] )
		&& ((saida5_expected_prev[6] !== last_saida5_exp[6]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida5[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida5_expected_prev);
		$display ("     Real value = %b", saida5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_saida5_exp[6] = saida5_expected_prev[6];
	end
	if (
		( saida5_expected_prev[7] !== 1'bx ) && ( saida5_prev[7] !== saida5_expected_prev[7] )
		&& ((saida5_expected_prev[7] !== last_saida5_exp[7]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida5[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida5_expected_prev);
		$display ("     Real value = %b", saida5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_saida5_exp[7] = saida5_expected_prev[7];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module Passador_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clock;
reg [7:0] entrada;
// wires                                               
wire [7:0] saida0;
wire [7:0] saida1;
wire [7:0] saida2;
wire [7:0] saida3;
wire [7:0] saida4;
wire [7:0] saida5;

wire sampler;                             

// assign statements (if any)                          
Passador i1 (
// port map - connection between master ports and signals/registers   
	.clock(clock),
	.entrada(entrada),
	.saida0(saida0),
	.saida1(saida1),
	.saida2(saida2),
	.saida3(saida3),
	.saida4(saida4),
	.saida5(saida5)
);

// clock
always
begin
	clock = 1'b0;
	clock = #20000 1'b1;
	#20000;
end 
// entrada[ 7 ]
initial
begin
	entrada[7] = 1'b0;
	entrada[7] = #80000 1'b1;
	entrada[7] = #80000 1'b0;
	entrada[7] = #80000 1'b1;
	entrada[7] = #40000 1'b0;
	entrada[7] = #40000 1'b1;
	entrada[7] = #80000 1'b0;
	entrada[7] = #200000 1'b1;
	entrada[7] = #40000 1'b0;
	entrada[7] = #40000 1'b1;
	entrada[7] = #80000 1'b0;
	entrada[7] = #40000 1'b1;
	entrada[7] = #40000 1'b0;
	entrada[7] = #40000 1'b1;
	entrada[7] = #40000 1'b0;
	entrada[7] = #40000 1'b1;
end 
// entrada[ 6 ]
initial
begin
	entrada[6] = 1'b1;
	entrada[6] = #40000 1'b0;
	entrada[6] = #40000 1'b1;
	entrada[6] = #80000 1'b0;
	entrada[6] = #200000 1'b1;
	entrada[6] = #40000 1'b0;
	entrada[6] = #40000 1'b1;
	entrada[6] = #40000 1'b0;
	entrada[6] = #80000 1'b1;
	entrada[6] = #400000 1'b0;
end 
// entrada[ 5 ]
initial
begin
	entrada[5] = 1'b0;
	entrada[5] = #40000 1'b1;
	entrada[5] = #40000 1'b0;
	entrada[5] = #200000 1'b1;
	entrada[5] = #40000 1'b0;
	entrada[5] = #80000 1'b1;
	entrada[5] = #40000 1'b0;
	entrada[5] = #40000 1'b1;
	entrada[5] = #40000 1'b0;
	entrada[5] = #120000 1'b1;
	entrada[5] = #40000 1'b0;
	entrada[5] = #120000 1'b1;
	entrada[5] = #120000 1'b0;
end 
// entrada[ 4 ]
initial
begin
	entrada[4] = 1'b1;
	entrada[4] = #80000 1'b0;
	entrada[4] = #40000 1'b1;
	entrada[4] = #40000 1'b0;
	entrada[4] = #80000 1'b1;
	entrada[4] = #80000 1'b0;
	entrada[4] = #80000 1'b1;
	entrada[4] = #80000 1'b0;
	entrada[4] = #200000 1'b1;
	entrada[4] = #200000 1'b0;
	entrada[4] = #40000 1'b1;
end 
// entrada[ 3 ]
initial
begin
	entrada[3] = 1'b1;
	entrada[3] = #40000 1'b0;
	entrada[3] = #40000 1'b1;
	entrada[3] = #80000 1'b0;
	entrada[3] = #40000 1'b1;
	entrada[3] = #40000 1'b0;
	entrada[3] = #40000 1'b1;
	entrada[3] = #40000 1'b0;
	entrada[3] = #80000 1'b1;
	entrada[3] = #40000 1'b0;
	entrada[3] = #40000 1'b1;
	entrada[3] = #40000 1'b0;
	entrada[3] = #40000 1'b1;
	entrada[3] = #120000 1'b0;
	entrada[3] = #40000 1'b1;
	entrada[3] = #40000 1'b0;
	entrada[3] = #80000 1'b1;
end 
// entrada[ 2 ]
initial
begin
	entrada[2] = 1'b1;
	entrada[2] = #160000 1'b0;
	entrada[2] = #80000 1'b1;
	entrada[2] = #40000 1'b0;
	entrada[2] = #80000 1'b1;
	entrada[2] = #80000 1'b0;
	entrada[2] = #120000 1'b1;
	entrada[2] = #40000 1'b0;
	entrada[2] = #80000 1'b1;
	entrada[2] = #40000 1'b0;
	entrada[2] = #40000 1'b1;
	entrada[2] = #120000 1'b0;
	entrada[2] = #40000 1'b1;
end 
// entrada[ 1 ]
initial
begin
	entrada[1] = 1'b1;
	entrada[1] = #40000 1'b0;
	entrada[1] = #40000 1'b1;
	entrada[1] = #40000 1'b0;
	entrada[1] = #40000 1'b1;
	entrada[1] = #120000 1'b0;
	entrada[1] = #120000 1'b1;
	entrada[1] = #40000 1'b0;
	entrada[1] = #120000 1'b1;
	entrada[1] = #40000 1'b0;
	entrada[1] = #40000 1'b1;
	entrada[1] = #160000 1'b0;
	entrada[1] = #40000 1'b1;
	entrada[1] = #120000 1'b0;
end 
// entrada[ 0 ]
initial
begin
	entrada[0] = 1'b1;
	entrada[0] = #40000 1'b0;
	entrada[0] = #40000 1'b1;
	entrada[0] = #40000 1'b0;
	entrada[0] = #80000 1'b1;
	entrada[0] = #40000 1'b0;
	entrada[0] = #160000 1'b1;
	entrada[0] = #80000 1'b0;
	entrada[0] = #40000 1'b1;
	entrada[0] = #80000 1'b0;
	entrada[0] = #40000 1'b1;
	entrada[0] = #40000 1'b0;
	entrada[0] = #40000 1'b1;
	entrada[0] = #40000 1'b0;
	entrada[0] = #120000 1'b1;
	entrada[0] = #40000 1'b0;
end 

Passador_vlg_sample_tst tb_sample (
	.clock(clock),
	.entrada(entrada),
	.sampler_tx(sampler)
);

Passador_vlg_check_tst tb_out(
	.saida0(saida0),
	.saida1(saida1),
	.saida2(saida2),
	.saida3(saida3),
	.saida4(saida4),
	.saida5(saida5),
	.sampler_rx(sampler)
);
endmodule

